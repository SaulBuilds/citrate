name: Build Cross-Platform Binaries

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-matrix:
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            rust-target: x86_64-unknown-linux-gnu
            binary-suffix: ""
            artifact-suffix: linux-x86_64

          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            rust-target: aarch64-unknown-linux-gnu
            binary-suffix: ""
            artifact-suffix: linux-arm64

          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            rust-target: x86_64-apple-darwin
            binary-suffix: ""
            artifact-suffix: macos-x86_64

          # macOS ARM64 (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin
            rust-target: aarch64-apple-darwin
            binary-suffix: ""
            artifact-suffix: macos-arm64

          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            rust-target: x86_64-pc-windows-msvc
            binary-suffix: .exe
            artifact-suffix: windows-x86_64

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.rust-target }}

    - name: Install cross-compilation dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-

    - name: Build binaries
      run: |
        cargo build --release --target ${{ matrix.rust-target }}

    - name: Create artifact directory
      run: |
        mkdir -p artifacts/${{ matrix.artifact-suffix }}

    - name: Copy binaries (Unix)
      if: runner.os != 'Windows'
      run: |
        cp target/${{ matrix.rust-target }}/release/lattice artifacts/${{ matrix.artifact-suffix }}/lattice${{ matrix.binary-suffix }}
        cp target/${{ matrix.rust-target }}/release/lattice-cli artifacts/${{ matrix.artifact-suffix }}/lattice-cli${{ matrix.binary-suffix }}
        cp target/${{ matrix.rust-target }}/release/lattice-wallet artifacts/${{ matrix.artifact-suffix }}/lattice-wallet${{ matrix.binary-suffix }}
        cp target/${{ matrix.rust-target }}/release/faucet artifacts/${{ matrix.artifact-suffix }}/faucet${{ matrix.binary-suffix }}

    - name: Copy binaries (Windows)
      if: runner.os == 'Windows'
      run: |
        copy target\${{ matrix.rust-target }}\release\lattice.exe artifacts\${{ matrix.artifact-suffix }}\lattice.exe
        copy target\${{ matrix.rust-target }}\release\lattice-cli.exe artifacts\${{ matrix.artifact-suffix }}\lattice-cli.exe
        copy target\${{ matrix.rust-target }}\release\lattice-wallet.exe artifacts\${{ matrix.artifact-suffix }}\lattice-wallet.exe
        copy target\${{ matrix.rust-target }}\release\faucet.exe artifacts\${{ matrix.artifact-suffix }}\faucet.exe

    - name: Create checksums
      run: |
        cd artifacts/${{ matrix.artifact-suffix }}
        if [ "$RUNNER_OS" = "Windows" ]; then
          certutil -hashfile lattice.exe SHA256 > checksums.txt
          certutil -hashfile lattice-cli.exe SHA256 >> checksums.txt
          certutil -hashfile lattice-wallet.exe SHA256 >> checksums.txt
          certutil -hashfile faucet.exe SHA256 >> checksums.txt
        else
          sha256sum * > checksums.txt
        fi
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: lattice-binaries-${{ matrix.artifact-suffix }}
        path: artifacts/${{ matrix.artifact-suffix }}
        retention-days: 30

  build-gui:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact-suffix: linux-x86_64
          - os: macos-latest
            artifact-suffix: macos-universal
          - os: windows-latest
            artifact-suffix: windows-x86_64

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: gui/lattice-core/package-lock.json

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          gui/lattice-core/src-tauri/target
        key: ${{ runner.os }}-gui-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install dependencies
      working-directory: gui/lattice-core
      run: npm ci

    - name: Build Tauri app
      working-directory: gui/lattice-core
      run: npm run tauri:build

    - name: Create GUI artifacts directory
      run: mkdir -p artifacts/gui-${{ matrix.artifact-suffix }}

    - name: Copy GUI artifacts (Linux)
      if: runner.os == 'Linux'
      run: |
        cp gui/lattice-core/src-tauri/target/release/bundle/deb/*.deb artifacts/gui-${{ matrix.artifact-suffix }}/
        cp gui/lattice-core/src-tauri/target/release/bundle/appimage/*.AppImage artifacts/gui-${{ matrix.artifact-suffix }}/

    - name: Copy GUI artifacts (macOS)
      if: runner.os == 'macOS'
      run: |
        cp -r gui/lattice-core/src-tauri/target/release/bundle/macos/*.app artifacts/gui-${{ matrix.artifact-suffix }}/
        cp gui/lattice-core/src-tauri/target/release/bundle/dmg/*.dmg artifacts/gui-${{ matrix.artifact-suffix }}/

    - name: Copy GUI artifacts (Windows)
      if: runner.os == 'Windows'
      run: |
        copy "gui\lattice-core\src-tauri\target\release\bundle\msi\*.msi" "artifacts\gui-${{ matrix.artifact-suffix }}\"
        copy "gui\lattice-core\src-tauri\target\release\bundle\nsis\*.exe" "artifacts\gui-${{ matrix.artifact-suffix }}\"

    - name: Upload GUI artifacts
      uses: actions/upload-artifact@v3
      with:
        name: lattice-gui-${{ matrix.artifact-suffix }}
        path: artifacts/gui-${{ matrix.artifact-suffix }}
        retention-days: 30

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-matrix, build-gui]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Create release archives
      run: |
        cd artifacts
        for dir in lattice-binaries-*; do
          platform=$(echo $dir | sed 's/lattice-binaries-//')
          tar -czf "lattice-v${GITHUB_REF_NAME#v}-${platform}.tar.gz" -C "$dir" .
        done

        for dir in lattice-gui-*; do
          platform=$(echo $dir | sed 's/lattice-gui-//')
          tar -czf "lattice-gui-v${GITHUB_REF_NAME#v}-${platform}.tar.gz" -C "$dir" .
        done

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*.tar.gz
          artifacts/lattice-gui-*/*.deb
          artifacts/lattice-gui-*/*.AppImage
          artifacts/lattice-gui-*/*.dmg
          artifacts/lattice-gui-*/*.msi
          artifacts/lattice-gui-*/*.exe
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}