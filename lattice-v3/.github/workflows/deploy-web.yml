name: Deploy Web Applications

on:
  push:
    branches: [main]
    paths:
      - 'explorer/**'
      - 'gui/lattice-core/**'
  workflow_dispatch:
    inputs:
      app:
        description: 'Application to deploy'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - explorer
        - docs

env:
  NODE_VERSION: '18'

jobs:
  deploy-explorer:
    if: github.event.inputs.app == 'explorer' || github.event.inputs.app == 'all' || contains(github.event.head_commit.modified, 'explorer/')
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: explorer/package-lock.json

    - name: Install dependencies
      working-directory: explorer
      run: npm ci

    - name: Build application
      working-directory: explorer
      run: npm run build
      env:
        NEXT_PUBLIC_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
        NEXT_PUBLIC_WS_URL: ${{ secrets.MAINNET_WS_URL }}
        NEXT_PUBLIC_CHAIN_ID: ${{ secrets.MAINNET_CHAIN_ID }}

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_EXPLORER_PROJECT_ID }}
        working-directory: explorer
        production: ${{ github.ref == 'refs/heads/main' }}

  deploy-docs:
    if: github.event.inputs.app == 'docs' || github.event.inputs.app == 'all'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        pip install mkdocs mkdocs-material mkdocs-awesome-pages-plugin

    - name: Build documentation
      run: |
        mkdocs build --clean

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        cname: docs.lattice.ai

  deploy-contract-docs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1

    - name: Generate contract documentation
      working-directory: contracts
      run: |
        forge doc --build

    - name: Deploy contract docs
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./contracts/docs/book
        destination_dir: contracts
        cname: contracts.lattice.ai

  notify-deployment:
    needs: [deploy-explorer, deploy-docs, deploy-contract-docs]
    if: always() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - name: Notify Discord
      uses: sarisia/actions-status-discord@v1
      if: always()
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        title: "Lattice Web Deployment"
        description: |
          **Explorer**: ${{ needs.deploy-explorer.result }}
          **Documentation**: ${{ needs.deploy-docs.result }}
          **Contract Docs**: ${{ needs.deploy-contract-docs.result }}
        color: ${{ needs.deploy-explorer.result == 'success' && needs.deploy-docs.result == 'success' && needs.deploy-contract-docs.result == 'success' && '0x00ff00' || '0xff0000' }}