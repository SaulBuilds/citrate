name: Publish SDKs

on:
  push:
    tags: ['sdk-v*']
  workflow_dispatch:
    inputs:
      sdk:
        description: 'SDK to publish'
        required: true
        default: 'both'
        type: choice
        options:
        - both
        - javascript
        - python
      version:
        description: 'Version to publish (leave empty for package.json/pyproject.toml version)'
        required: false
        type: string
      test_release:
        description: 'Publish to test repositories (TestPyPI/npm beta)'
        required: false
        default: false
        type: boolean

jobs:
  publish-javascript-sdk:
    if: github.event.inputs.sdk == 'javascript' || github.event.inputs.sdk == 'both' || startsWith(github.ref, 'refs/tags/sdk-v')
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        cache-dependency-path: sdk/javascript/package-lock.json

    - name: Install dependencies
      working-directory: sdk/javascript
      run: npm ci

    - name: Update version if specified
      if: github.event.inputs.version != ''
      working-directory: sdk/javascript
      run: npm version ${{ github.event.inputs.version }} --no-git-tag-version

    - name: Run linting
      working-directory: sdk/javascript
      run: npm run lint

    - name: Run tests
      working-directory: sdk/javascript
      run: npm run test

    - name: Build package
      working-directory: sdk/javascript
      run: npm run build

    - name: Publish to npm (production)
      if: github.event.inputs.test_release != 'true'
      working-directory: sdk/javascript
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Publish to npm (beta)
      if: github.event.inputs.test_release == 'true'
      working-directory: sdk/javascript
      run: npm publish --tag beta --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create SDK artifact
      run: |
        mkdir -p artifacts/javascript-sdk
        cp -r sdk/javascript/dist artifacts/javascript-sdk/
        cp sdk/javascript/package.json artifacts/javascript-sdk/
        cp sdk/javascript/README.md artifacts/javascript-sdk/ || true

    - name: Upload SDK artifact
      uses: actions/upload-artifact@v3
      with:
        name: javascript-sdk
        path: artifacts/javascript-sdk
        retention-days: 30

  publish-python-sdk:
    if: github.event.inputs.sdk == 'python' || github.event.inputs.sdk == 'both' || startsWith(github.ref, 'refs/tags/sdk-v')
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Install SDK dependencies
      working-directory: sdks/python
      run: |
        pip install -e ".[dev]"

    - name: Update version if specified
      if: github.event.inputs.version != ''
      working-directory: sdks/python
      run: |
        sed -i 's/version = "[^"]*"/version = "${{ github.event.inputs.version }}"/' pyproject.toml

    - name: Run linting
      working-directory: sdks/python
      run: |
        ruff check .
        black --check .
        mypy lattice_sdk

    - name: Run tests
      working-directory: sdks/python
      run: |
        pytest tests/ -v --cov=lattice_sdk --cov-report=xml

    - name: Build package
      working-directory: sdks/python
      run: |
        python -m build

    - name: Check package
      working-directory: sdks/python
      run: |
        twine check dist/*

    - name: Publish to PyPI (production)
      if: github.event.inputs.test_release != 'true'
      working-directory: sdks/python
      run: |
        twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

    - name: Publish to TestPyPI
      if: github.event.inputs.test_release == 'true'
      working-directory: sdks/python
      run: |
        twine upload --repository testpypi dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}

    - name: Create SDK artifact
      run: |
        mkdir -p artifacts/python-sdk
        cp -r sdks/python/dist artifacts/python-sdk/
        cp sdks/python/pyproject.toml artifacts/python-sdk/
        cp sdks/python/README.md artifacts/python-sdk/ || true

    - name: Upload SDK artifact
      uses: actions/upload-artifact@v3
      with:
        name: python-sdk
        path: artifacts/python-sdk
        retention-days: 30

  create-sdk-release:
    if: startsWith(github.ref, 'refs/tags/sdk-v')
    needs: [publish-javascript-sdk, publish-python-sdk]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download all SDK artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Create SDK release archives
      run: |
        cd artifacts
        if [ -d "javascript-sdk" ]; then
          tar -czf "lattice-javascript-sdk-${GITHUB_REF_NAME#sdk-v}.tar.gz" -C javascript-sdk .
        fi
        if [ -d "python-sdk" ]; then
          tar -czf "lattice-python-sdk-${GITHUB_REF_NAME#sdk-v}.tar.gz" -C python-sdk .
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: "SDK Release ${GITHUB_REF_NAME#sdk-v}"
        files: |
          artifacts/*.tar.gz
        body: |
          ## Lattice SDK Release ${GITHUB_REF_NAME#sdk-v}

          This release includes updates to the Lattice AI blockchain SDKs.

          ### Installation

          **JavaScript/TypeScript:**
          ```bash
          npm install @lattice-ai/sdk@${GITHUB_REF_NAME#sdk-v}
          ```

          **Python:**
          ```bash
          pip install lattice-sdk==${GITHUB_REF_NAME#sdk-v}
          ```

          ### Changes
          See individual package changelogs for detailed changes.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}